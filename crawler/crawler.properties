# MANDATORY: where to start. host names must end with /, eg. http://127.0.0.1/
startURL=http://127.0.0.1/

# restrict crawling to urls matching this regex. default: everything under startURL.
#includeCrawl=

# among the included urls, exclude those matching this regex. default: no exclusions.
#excludeCrawl=

# extract links from content types matching this regex. default: no extraction.
includeExtractLink=text/html

# among the included content types, exclude any matching this regex. default: no exclusions.
#excludeExtractLink=

# save to disk all content types matching this regex. default: no content will be stored
includeStore=text/html

# don't store content types matching this regex pattern. default: no exclusions.
#excludeStore=

# the URLs to content types matching this regexp are put in a separate file.
includeCollectURL=application/pdf|image/svg+xml

# exclude any matching this regex. default: no exclusions.
#excludeCollectURL=

# filename to save URLs to. if filename is blank or unspecified no file will be generated.
listFile=binaries.txt

# the user agent the crawler reports as.
userAgent=

# when mapping URLs to file names, add the string given here to all URLs ending with "/". default: index.html
defaultPage=index.html

# use this encoding when storing pages to disk unless the content-type header specifies otherwise.
defaultEncoding=UTF-8

# number of threads for downloading.
downloadThreads=1

# number of threads for parsing.
parseThreads=1

# number of threads for saving to disk.
saveThreads=1

# download up to n pages.
maxPages=10

# let each download thread wait n seconds before it starts.
downloadDelay=10

# stop crawling if no new urls are found within n seconds.
crawlerTimeout=30

# where to put the downloaded web pages. mandatory!
outputDirectory=../webpages/

# where to put download statistics. mandatory!
reportDirectory=../reports/

# SQL statements for generating reports after a run.
reportSQL=select http_code, url from downloads where http_code <> 200@httperrors.txt\
|select url from downloads where LENGTH(url) > 150@longurls.txt\
|select url_to, url_from from links@parentpages.txt\
|select downloaded_at, url from downloads where downloaded=true@timestamps.txt\
|select COUNT(*) + ' pages downloaded.' from downloads where downloaded=true@pagecount.txt\
|select 'Crawling took ' + 0.001 * DATEDIFF('ms', MIN(downloaded_at), MAX(downloaded_at)) + ' seconds.' from downloads where downloaded=true@crawlertime.txt\
|select 'Average response time: ' + 0.001 * SUM(response_time) / COUNT(*) + ' seconds.' from downloads where downloaded=true@avgresponsetime.txt\
|select response_time, url from downloads where downloaded=true@responsetimes.txt\
|select response_time, url from downloads where downloaded=true order by response_time desc@responsetimes_sorted.txt\
|select url from downloads where downloaded=true@urls.txt
	

# data model for the download statistics:
#
# downloads
# url VARCHAR(4095) | http_code INTEGER default 0 | response_time INTEGER default 0 | downloaded_at DATETIME default NOW | downladed BOOLEAN
#
# links
# url_from VARCHAR(4095) | url_to VARCHAR(4095)
#
